version: '3.7'

services:
  server:
    build:
      context: ./
      target: development-build-stage
      dockerfile: Dockerfile
    container_name: tutis_server
    ports:
      - '3000:3000'
    volumes:
      - ./:/app
      - /app/node_modules
    restart: 'unless-stopped'
    env_file:
      - .env.development.local
    networks:
      - backend
    links:
      - postgres
    depends_on:
      - postgres
    environment:
      NODE_ENV: development
      PORT: 3000
      DB_HOST: host.docker.internal
      DB_PORT: ${DB_PORT}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_DATABASE: ${DB_DATABASE}

  postgres:
    image: postgres
    container_name: tutis_postgres
    ports:
      - '5432:5432'
    restart: 'unless-stopped'
    env_file:
      - .env.development.local
    networks:
      - backend
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_DATABASE}
      POSTGRES_PORT: ${DB_PORT}
      POSTGRES_HOST: ${DB_HOST}

  pgAdmin:
    image: dpage/pgadmin4
    container_name: tutis_pgAdmin
    ports:
      - '5050:80'
    restart: 'unless-stopped'
    env_file:
      - .env.development.local
    networks:
      - backend
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
      # PGADMIN_PORT: ${PGADMIN_PORT}
      PGADMIN_HOST: ${PGADMIN_HOST}

  portainer:
    image: portainer/portainer
    container_name: tutis_portainer
    ports:
      - '9000:9000'
    restart: 'unless-stopped'
    networks:
      - backend
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
      - ./portainer:/data
      - /etc/localtime:/etc/localtime:ro

  redis:
    image: redis
    container_name: tutis_redis
    ports:
      - '6379:6379'
    restart: 'unless-stopped'
    networks:
      - backend
    volumes:
      - redis_data:/data
      - /etc/localtime:/etc/localtime:ro
      - ./redis:/data

  redis-commander:
    image: rediscommander/redis-commander
    container_name: tutis_redis-commander
    ports:
      - '8081:8081'
    restart: 'unless-stopped'
    networks:
      - backend
    environment:
      REDIS_HOSTS: host.docker.internal
      REDIS_PORT: 6379
      REDIS_TLS: false
      REDIS_SCANCOUNT: 1000
      REDIS_DBINDEX: 0
      REDIS_DBINDEXES: 0

  kafka:
    image: wurstmeister/kafka
    container_name: tutis_kafka
    ports:
      - '9092:9092'
    restart: 'unless-stopped'
    networks:
      - backend
    depends_on:
      - zookeeper
    environment:
      KAFKA_ADVERTISED_HOST_NAME: tutis_kafka
      KAFKA_ADVERTISED_PORT: 9092
      KAFKA_ZOOKEEPER_CONNECT: tutis_zookeeper:2181
      KAFKA_CREATE_TOPICS: "users:1:1"

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: tutis_kafka-ui
    ports:
      - '8082:8080'
    restart: 'unless-stopped'
    networks:
      - backend
    depends_on:
      - kafka
    environment:
      KAFKA_CLUSTERS_0_NAME: tutis_kafka
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: tutis_kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: tutis_zookeeper:2181

  zookeeper:
    image: wurstmeister/zookeeper
    container_name: tutis_zookeeper
    ports:
      - '2181:2181'
    restart: 'unless-stopped'
    networks:
      - backend
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181


networks:
  backend:
    driver: bridge

volumes:
  data:
    driver: local
  portainer_data:
    driver: local
  redis_data:
    driver: local
